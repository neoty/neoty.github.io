<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[nginx server header 감추기]]></title>
    <url>%2F2018%2F11%2F25%2Flinux%2Fnginx-hide-server-header%2F</url>
    <content type="text"><![CDATA[nginx 기본 설치 시 후 response 응답의 header를 보면 server 항목에 nginx 버전과 심지어 os 정보까지 출력된다.보안적인 측면에서 당연히 좋을 리가 없다. (해당 정보들을 수집하여 자동으로 웹서버 통계를 만드는 것으로 보이는데 통계를 위해 서비스를 하는 건 아니니..)ubuntu 16.04 에서 작성되었습니다.nginx 버전과 os 정보 감추기nginx.conf 설정Syntax: server_tokens on | off | build | string;Default: server_tokens on;Context: http, server, locationhttp, server, location context에 적용 가능하다. 특별한일이 없다면 http context에 적용nginx.conf1234http &#123; server_tokens off; 생략&#125;nginx 재시작12$ sudo nginx -t$ sudo service nginx reloadresponse server header 삭제nginx-extras 패키지 설치위 단계는 nginx 버전 정보와 서버 os까지는 유효하지만 웹 서버 정보(nginx) 를 감추진 못한다. 구글링 결과 컴파일 단계에서 수정하는 방법 등이 존재하지만. 좀 더 쉬운 방법을 적용하였다. nginx-extras 패키지를 설치하는 방법이다.(처음부터 nginx-extras를 설치하면 된다)패키지 설치 후 재시작123$ sudo apt-get install nginx-extras$ sudo nginx -t$ sudo service nginx reloadnginx-extras는 다양한 모듈을 더 지원하지만 성능이나 기능에 버그가 포함되어 있을 수도 있습니다. (사용에 신중을 기하세요.)nginx.conf 설정syntax: more_set_headers [-t &lt;content-type list&gt;]… [-s &lt;status-code list&gt;]… &lt;new-header&gt;…default: nocontext: http, server, location, location ifphase: output-header-filteroverwrite 방법으로 내용을 삭제한다.nginx.conf123http &#123; more_set_headers 'Server: ';&#125;nginx 재시작12$ sudo nginx -t$ sudo service nginx reload]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pm2 graceful start]]></title>
    <url>%2F2018%2F11%2F25%2Fnodejs%2Fpm2-graceful-start%2F</url>
    <content type="text"><![CDATA[graceful startSometimes you might need to wait for your application to have etablished connections with your DBs/caches/workers/whatever. PM2 needs to wait before considering your application as online. To do this, you need to provide –wait-ready to the CLI or provide wait_ready: true in a process file. This will make PM2 listen for that event. In your application you will need to add process.send(‘ready’); when you want your application to be considered as ready.pm2 graceful startnode application 구동시 일련의 과정을 거치기 마련이다 (db, memory db pool 생성이나 기타 비동기적인 initialization 작업등) 동기 작업이라면 상관없겠지만 비동기 작업 같은 경우 콜백 등으로 구현해서 모든게 준비가 되었을떄 application 을 구동(사용 단계로 격상) 시켜야 한다.pm2는 이러한 상황에 대비에 옵션으로 해당 과정을 쉽게 할 수 있게 기능을 제공한다.(원문에선 cli로 옵션을 줄수도 있지만 여기에선 ecosystem.config.js를 기준으로 설명)Samplegraceful start 활성화ecosystem.config.js12345678910111213module.exports = &#123; apps : [ &#123; "name" : 'pm2-graceful-start-exmaple', "script" : 'bin/www', "wait_ready" : true, "listen_timeout" : 5000, // ms 단위 env_production : &#123; NODE_ENV: 'production' &#125; &#125; ]&#125;;핵심 옵션은 wait_ready와 listen_timeout이다. wait_ready값이 true라면 listen_timeout동안 대기하며 해당 시간 동안 특정한 signal 을 받지 못하면 강제로 application 이 시작(노출) 되게 된다.(listen_timeout의 default값은 3000ms)application 시작 signal 보내기app.js (express template 이기 때문에 기본 코드 생략)12345678생략setTimeout(function() &#123; process.send('ready'); console.log("application published!")&#125;, 2000);module.exports = app;application 이 준비가 되었을 때 process.send(&#39;ready&#39;)코드로 pm2에 signal 을 보내면 된다. (예제는 2초 후에 앱이 구동) 비동기적인 작업등을 명시하고 모든 비동기 작업이 끝나면 콜백으로 process.send(&#39;ready&#39;)실행하여 안정적인 application 구동을 꾀할 수 있다.]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[express babel 적용하기]]></title>
    <url>%2F2018%2F11%2F21%2Fnodejs%2Fstart-express-babel%2F</url>
    <content type="text"><![CDATA[Babel?Babel is a toolchain that is mainly used to convert ECMAScript 2015+ code into a backwards compatible version of JavaScript in current and older browsers or environments. Here are the main things Babel can do for youbabeljs.iobabel은 최신 ECMA 문법을 하위 버전에 맞게 변환하여 최신 ECMA 문법을 사용할 수 있는 장점과 최신 ECMA 문법에 구애받지 않고 코드를 실행할 수 있게 해주는 도구이다.express 와 babel 사용하기sample 폴더 만들기12$ mkdir example-express-babel$ cd example-express-babelexpress init12$ express --view=ejs .$ npm install소스 위치 변경12$ mkdir src$ mv app.js bin public routes views ./src변환 대상이 되는 소스 폴더는 따로 src 폴더를 만들어서 옮긴다.babel 모듈 추가 &amp; 삭제 모듈 추가123$ npm install babel-cli --save-dev$ npm install babel-preset-env --save-dev$ npm install rimraf --save-devbuild 스크립트 추가 &amp; start command 변경package.json12345678910$ vi package.json... 생략"scripts": &#123; "start": "node ./dist/bin/www", "prebuild": "rimraf ./dist", "build": "babel src --minified --out-dir ./dist --source-maps --copy-files"&#125;,... 생략prebuild는 npm run build 실행 시 build 스크립트가 실행 전 실행되는 커맨드이다. (변환된 파일이 위치하게 될 dist 폴더를 깨끗이 삭제하는 작업)preset 설정.babelrc12345678910$ vi .babelrc&#123; "presets": [ ["env", &#123; "targets": &#123; "node": "current" &#125; &#125;] ]&#125;현재 설치된 node 버전에 맞게 변환 하도록 설정build 시작1$ npm run buildbuild 실행실행1$ npm run start추가ci/cd 시나리오로는개발 완료원격 저장소 pushhook 을 이용하여 ci 도구에서 pullci에서 build 후build 결과물을 배포서버에서 재실행]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>babel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dotenv 모듈을 이용하여 동적으로 enviroment 변수 정의]]></title>
    <url>%2F2018%2F11%2F20%2Fnodejs%2Fdotenv-load-enviroment-file%2F</url>
    <content type="text"><![CDATA[dotenvDotenv is a zero-dependency module that loads environment variables from a .env file into process.env. Storing configuration in the environment separate from code is based on The Twelve-Factor App methodology.npmjs dotenvnodejs dotenv 모듈을 이용하여 서버마다 최소한의 설정으로 환경에 맞는 환경변수를 사용한다.(환경 변수는 소스코드에 포함시키지 않는 게 정석이나… 관리 측면이나 공개할 소스는 아니기 때문에 상황에 맞게 사용하시면 될 듯..)code실습 앱 생성1234$ mkdir example-dotenv$ cd example-dotenv$ npm init모두 enter 입력dotenv 설치1$ npm install dotenv테스트용 .env 파일 생성test.env12test1=test1내용test2=test2내용index.js 파일 생성index.js12345const dotenv = require('dotenv');require('dotenv').config(&#123; path: 'test.env' &#125;);console.log(process.env.test1);console.log(process.env.test2);index.js 실행123$ node index.jstest1 내용test2 내용활용기본 골자는 .env 파일에 있는 내용을 그대로 process.env에서 사용할 수 있도록 해준다는건데, 서버별로 기본적으로 NODE_ENV 를 정의해놓고 서버 마다 다른 환경 설정을 기술하고 서버마다 환경에 맞는 .env 파일을 로드할 수 있게끔 할 수 있다.sampleapp.js1require('dotenv').config(&#123; path: path.join(__dirname, `config/$&#123;process.env.NODE_ENV || 'development'&#125;.env`) &#125;);기본 정의되어 있는 NODE_ENV가 정의되어 있으면 해당 NODE_ENV 값에 맞는 .env 파일을 config 폴더에서 찾는 모습이다. NODE_ENV가 없으면 기본 development.env 파일을 로드주의사항What happens to environment variables that were already set?We will never modify any environment variables that have already been set. In particular, if there is a variable in your .env file which collides with one that already exists in your environment, then that variable will be skipped. This behavior allows you to override all .env configurations with a machine-specific environment, although it is not recommended.npmjs dotenvprocess.env아래에 이미 key가 정의되어있다면 dotenv 로드하여도 해당 key의 value는 overwrite 되지 않는다.(강제로 할당 하는 방법은 존재함)]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql connection pooling]]></title>
    <url>%2F2018%2F11%2F19%2Fnodejs%2Fnodejs-mysql-pool%2F</url>
    <content type="text"><![CDATA[database pooling 이 란In software engineering, a connection pool is a cache of database connections maintained so that the connections can be reused when future requests to the database are required. Connection pools are used to enhance the performance of executing commands on a database. (구글 database pooling 검색 시)간단히 말해서 데이터베이스 커넥션의 캐시 개념이다 적당한 양의 pool 을 생성해놓고 application에서 database 접근이 필요할 때 connection을 처음부터 맺는 게 아니라 기존에 맺어져 있던 connection 을 하나 들고 와서 바로 사용할 수 있게 하는 개념입니다.mysql module pool에 대한 자세한 설명은 여기서code 구현 (기본 setup pass)mysql 모듈 설치1$ npm install mysqlpool 생성최초 1회 database에 접속하여 connection 이 정상일 경우 pool 을 생성하는 코드 pool 을 global로 할당하였지만 입맛에 맞게 수정하시면 됩니다.db.js12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849import mysql from 'mysql';/** 기본 정보 설정*/const connectionInfo = &#123; host: process.env.DB_HOST, // mysql 호스트 port: process.env.DB_PORT, // mysql 포트 user: process.env.DB_USER, // mysql access 아이디 password: process.env.DB_PASSWORD, // mysql access 비밀번호 database: process.env.DB_DATABASE, // 기본 접근 database 명 connectionLimit: process.env.DB_CONNECTION_LIMIT, // 최대 생성할 수 있는 pool 개수(추후 포스팅) charset: process.env.DB_CHARSET, // 연결 케릭터셋&#125;;/** pool 에서 실행되는 모든 쿼리들의 sql 로그를 남김*/const poolEventSetup = () =&gt; &#123; global.pool.on('connection', (poolConnection) =&gt; &#123; poolConnection.on('enqueue', (sequence) =&gt; &#123; if (sequence.constructor.name === 'Query') &#123; console.log(sequence.sql); &#125; &#125;); &#125;);&#125;;/** 일반 connection 접속 체크 후 pool 생성*/const initialization = (callback) =&gt; &#123; const connectionCheck = mysql.createConnection(connectionInfo); connectionCheck.connect((err) =&gt; &#123; connectionCheck.end(); // connection 에러 발생 if (err) return callback(err); // global 할당 ex) pool.query('select * from test', (err, results) =&gt; &#123;&#125;); global.pool = mysql.createPool(connectionInfo); // 개발 환경 시 실행 query 로깅 활성화 if (process.env.NODE_ENV !== 'production') poolEventSetup(); callback(null); &#125;);&#125;;module.exports.init = initialization;app.js module load불필요 코드 생략123456789...require('db').init((err) =&gt; &#123; if (err) &#123; process.exit(); &#125; else &#123; console.log('pool 생성 완료'); &#125;&#125;);...pool 생성 시connectionLimit 값을 100으로 하고 앱을 구동시 pool connection 이 곧바로 100개가 생성이 되진 않습니다.초기엔 최소의 pool 개수를 유지하고 실제 여유분의 pool 이 없을 시 connectionLimit 개수만큼 pool connection 이 생성됩니다.(동시에 실행되는 query 가 많을 시 생성)실제로 다양한 옵션이 존재하고 mysql에 connection timeout 설정도 해주어야 진정한 pool 효과를 볼 수가 있습니다 해당 부분에 대해서 추후에 포스팅으로 다루겠습니다.]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[사용빈도 높은 상태 코드]]></title>
    <url>%2F2018%2F11%2F16%2Fhttp%2Frestful-status-code%2F</url>
    <content type="text"><![CDATA[304 는 넣지 않았습니다. 참고링크코드 상태별 설명200 OK성공 상태를 나타내는 가장 일반적인 코드201 CreatedPOST 혹은 PUT 요청이 성공하였을 때204 No Content반환값이 없는 요청이 성공했을 때 (반환시 데이터 본문이 없어야 하므로 delete 시 사용)400 Bad Request누락된 데이터, 잘못된 데이터(유효성)의 접근 시401 Unauthorized미 인증 혹은 인증 만료로 인한 에러 코드403 Forbidden유효(권한 등)하지 않는 페이지의 접근 혹은 액션404 Not Found요청한 리소스가 없거나 보안상 401, 403 을 대체409 Conflict요청의 병합(동시작업)으로 인해 요청을 수행할 수 없을시500 Internal Server Error서버측의 에러로 인한 일반적인 반환 코드(보안상의 이유로 사용자에게 에러 코드는 간략화 한다.)]]></content>
      <categories>
        <category>Http</category>
      </categories>
      <tags>
        <tag>http</tag>
        <tag>status</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[http 응답코드 로드맵]]></title>
    <url>%2F2018%2F11%2F16%2Fhttp%2Fhttp-response-code-roadmap%2F</url>
    <content type="text"><![CDATA[]]></content>
      <categories>
        <category>Http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nodejs dockerlize - package.json 을 앞에 놓는이유]]></title>
    <url>%2F2018%2F11%2F16%2Fdocker%2Fdockerlize-nodejs%2F</url>
    <content type="text"><![CDATA[why?이유가 여러가지만 nodejs 앱을 dockerlize할 때 보통 package.json을 소스 복사전에 따로 복사해서 의존성을 install 한다.https://nodejs.org/ko/docs/guides/nodejs-docker-webapp/https://docs.docker.com/develop/develop-images/dockerfile_best-practices/그냥 통으로 현재 디렉토리(어플리케이션 소스등을) 복사해서 install 해도 될텐데 왜 그럴까?Dockerfile 에 기술되어있는 순서대로 각 명령별로 레이어를 생성한다. (해당 레이어 생성시 레이어작업 결과물은 최종 이미지의 용량과 관계가 있다.)일반적으로 package.json 을 활용하여 Dockerfile 안에서 의존성을 설치하게 된다.그런데 만약 변경 소지가 많은 앱 소스 COPY 와 동일 선상혹은 그 이후에 의존성 설치 작업을 하게 되면 매번 소스가 변경 될때 마다 의존성 설치도 계속 하게 된다. (docker 이미지 생성시 레이어 기법을 이용한다.)고로 변경 소지가 낮은 package.json 같은 경우 앱 소스 COPY 보다 상위에 두어 docker 의 레이어 캐싱을 활용하게 된다.이는 모든 어플리케이션 dockerlize 시에 고려되어야 하는 사항이고 docker image 생성 명령어 기술 시 최대한 수정 빈도가 낮은것을 수정빈도가 높은것보다 앞에 두는 형식으로 dockerfile 을 작성해야한다.12345678FROM node:alpineWORKDIR /usr/appCOPY package.json .RUN npm install --quietCOPY . .]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux timezone 변경하기]]></title>
    <url>%2F2018%2F11%2F16%2Flinux%2Ftimezone-change%2F</url>
    <content type="text"><![CDATA[보통 파일을 복사하는 형식으로 timezone을 변경하고 있는데 찾아보니 명령어로 간편하게 변경하는 방법이 있습니다.아래방법은 재부팅되어도 유효한 timezone변경입니다.ubuntu &lt;= 14.04 에서 테스트되었습니다.redhat 문서현재 timezone 정보 확인1# timedatectl status사용 가능한 timezone 확인1# timedatectl list-timezonesKST로 timezone 변경1# timedatectl set-timezone Asia/SeoulUTC timezone 으로 변경1# timedatectl set-timezone UTC]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>timezone</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker compose 최신 이미지 받고 앱 재생성]]></title>
    <url>%2F2018%2F11%2F10%2Fdocker%2Fpull-image-deploy%2F</url>
    <content type="text"><![CDATA[docker app 이 구동중이라도 상관 없습니다.구동중인 root 디렉토리 이동1$ cd some-directory최신 이미지 pull 받기1$ sudo docker-compose pull최신 이미지로 서비스 재 생성1$ sudo docker-compose up -d]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>docker-compose</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[chmod 퍼미션]]></title>
    <url>%2F2018%2F09%2F17%2Flinux%2Fchmod-permission-table%2F</url>
    <content type="text"><![CDATA[https://en.wikipedia.org/wiki/Chmod#PermisstionrwxBinary7read, write and executerwx1116read and writerw-1105read and executer-x1014read onlyr–1003write and execute-wx0112write only-w-0101execute only–x0010none—000]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>chmod</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Centos7 이상(Firewalld) 방화벽 설정 방법]]></title>
    <url>%2F2018%2F09%2F04%2Flinux%2Fcentos7-firewalld-config%2F</url>
    <content type="text"><![CDATA[공식 메뉴얼 제공 사이트입니다.Centos 7 으로 넘어오면서 기본 방화벽 설정 하는 방법이 변경되었습니다. 정확히는 RHEL 7 이상부터개인 적으로 기존 텍스트로 기술하는게 더 편한것 같네요. 요즘에야 클라우드 쪽에선 방화벽을 지원하니 특별한 경우가 아니고서야 리눅스에서 방화벽 설정할일이 덜하긴 하겠지만요!permanent 옵션이 붙으면 영구적으로 설정된다는 뜻입니다.현재 활성화된 존과 인터페이스 보기1# firewall-cmd --get-active-zones존 상태보기1# firewall-cmd --zone=&#123;존명&#125; --list-all이더넷에 정책 할당하기(eth0 번 이더넷에 internal 존 적용혹은 삭제 하는 방법)12# firewall-cmd --permanent --zone=internal --add-interface=eth0# firewall-cmd --permanent --zone=internal --remove-interface=eth0현재 존에 개방된 포트1# firewall-cmd --zone=&#123;존명&#125; --list-ports현재 존에 개방된 서비스(well-know 에 해당)1# firewall-cmd --zone=&#123;존명&#125; --list-services현재 존에 개방된 아이피1# firewall-cmd --zone=&#123;존명&#125; --list-sources존에 포트추가하기1# firewall-cmd --permanent --zone=&#123;존명&#125; --add-port=&#123;포트번호&#125;/&#123;tcp 혹은 udp&#125;존에 포트 범위로 추가하기(0~65535 번 추가)1# firewall-cmd --permanent --zone=&#123;존명&#125; --add-port=0-65535/&#123;tcp 혹은 udp&#125;존에 추가된 포트 삭제하기1# firewall-cmd --zone=&#123;존명&#125; --remove-port=&#123;포트번호&#125;/&#123;tcp 혹은 udp&#125;firewalld 리로드1# firewall-cmd --reload]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>firewalld</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[minio 설치(docker compose install)]]></title>
    <url>%2F2018%2F09%2F02%2Fopen-source%2Fintroduce-minio%2F</url>
    <content type="text"><![CDATA[Docker, NAS, LocalDrive등의 다양한 환경에 따른 설치법이 공식 홈페이지 존재합니다.여기선 docker compose를 이용한 Standalone설치 법입니다.공식사이트: https://www.minio.io/설치 전aws의 s3와 같은 open source가 없나 찾아보니 괜찮은게 있어서 소개해드립니다.minio에서 제공하는 sdk같은 경우 설정 정보면 변경하면 s3로 바로 전환할 수 있게끔 인터페이스를 제공하고 있습니다.본문은 s3가 아니고 minio 를 이용하여 object storage를 설치하는 내용입니다.설치docker-compose.yml 작성docker-compose.yml1234567891011121314version: '2' services: minio: image: minio/minio restart: always volumes: - /home/minio-data:/export ports: - "9000:9000" environment: MINIO_ACCESS_KEY: login MINIO_SECRET_KEY: password command: server /exportvolumes데이터가 저장 될 위치입니다. “:” 기준으로 왼쪽 path 에 실제 host에 저장 될 위치를 지정합니다. ex) /home/minio-dataenviromentMINIO_ACCESS_KEY - 임의의 access key 를 정의합니다. (아이디)MINIO_SECRET_KEY - 임의의 secret key 를 정의합니다. (패스워드)minio docker 구동1$ sudo docker-compose up -dminio 웹 UI 접근http://주소:9000 접근합니다.위에서 정의한 access key, secret key로 로그인합니다.]]></content>
      <categories>
        <category>Open source</category>
      </categories>
      <tags>
        <tag>minio</tag>
        <tag>open source</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ubuntu docker compose 설치]]></title>
    <url>%2F2018%2F09%2F02%2Fdocker%2Fcompose-install-ubuntu%2F</url>
    <content type="text"><![CDATA[아래 방법은 공식사이트에서 가져온 내용입니다.개인적으로 root 설치하기를 권장합니다.docker install linkdocker-compose install linkdocker 설치1234567891011121314151617181920$ sudo apt-get update $ sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ software-properties-common $ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - $ sudo apt-key fingerprint 0EBFCD88 $ sudo add-apt-repository \ "deb [arch=amd64] https://download.docker.com/linux/ubuntu \ $(lsb_release -cs) \ stable" $ sudo apt-get update $ sudo apt-get install docker-cedocker 설치 테스트12345678$ sudo docker run hello-world$ sudo docker ps -a실행 확인$ sudo docker rm &#123;위에서 확인한 CONTAINER ID&#125;$ sudo docker rmi hello-worlddocker compose 설치12345$ sudo curl -L https://github.com/docker/compose/releases/download/1.21.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose$ sudo chmod +x /usr/local/bin/docker-compose$ sudo docker-compose --version]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu 16.04 swap 메모리 추가하기]]></title>
    <url>%2F2018%2F09%2F02%2Flinux%2Fubuntu16.04-swap-config%2F</url>
    <content type="text"><![CDATA[설정 변경 전물리적 메모리의 * 2 배 정도로 추가하면 무난하다.상황에 따라 메모리가 많다면 1~1.5 배 고려 ( 구동되는 서비스들의 상황에 맞게 줄이 거나 늘리거나 ) (참고 문서)swappiness 설정도 필요하면 하자.2GB의 swap 메모리 추가1234$ sudo fallocate -l 2G /swapfile$ sudo chmod 600 /swapfile$ sudo mkswap /swapfile$ sudo swapon /swapfileswap 할당 확인1$ free -m재 부팅시에도 자동 할당기존 파일 백업1$ sudo cp /etc/fstab /etc/fstab.bak설정 추가1$ echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NVM 으로 node 버전 쉽게 관리하기]]></title>
    <url>%2F2018%2F05%2F19%2Fnodejs%2Fnode-version-manager-usage%2F</url>
    <content type="text"><![CDATA[최신 설치법은 아래 링크 참고해주세요.Github nvm 공식 repository아래 글은 우분투 16.04 기준입니다.nvm 설치nvm 설치123456$ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash$ cd ~/$ view .bashrc하단에 아래와 같은 profile이 추가 되었는지 확인 후 (우분투 기준입니다.) 없다면 수동 추가바랍니다.보통은 자동 추가가 됩니다.자동 스크립트 추가 확인.bashrc 나 .bash_profile 하단 내용123export NVM_DIR="$HOME/.nvm"[ -s "$NVM_DIR/nvm.sh" ] &amp;&amp; \. "$NVM_DIR/nvm.sh" # This loads nvm[ -s "$NVM_DIR/bash_completion" ] &amp;&amp; \. "$NVM_DIR/bash_completion" # This loads nvm bash_completion설치 path 업데이트설치 후 바로 사용할 경우 profile 을 읽어주어야 합니다.(재 로그인 시 불 필요)1$ source ~/.bashrc 또는 source ~/.bash_profile설치 확인1$ nvm --version최신 LTS node 설치설치 가능한 LTS 버전 확인12345678$ nvm ls-remote --lts v4.2.0 (LTS: Argon) v4.2.1 (LTS: Argon) v4.2.2 (LTS: Argon) ... 중략 v8.11.0 (LTS: Carbon) v8.11.1 (LTS: Carbon) v8.11.2 (Latest LTS: Carbon)선택한 LTS node 설치하기설치 버전은 자신에 맞게 변경하시면됩니다. 여기선 v8.11.212345678$ nvm install v8.11.2Downloading and installing node v8.11.2...Downloading https://nodejs.org/dist/v8.11.2/node-v8.11.2-linux-x64.tar.xz...######################################################################## 100.0%Computing checksum with sha256sumChecksums matched!Now using node v8.11.2 (npm v5.6.0)Creating default alias: default -&gt; v8.11.2설치 확인12345678910111213$ nvm list-&gt; v8.11.2default -&gt; v8.11.2node -&gt; stable (-&gt; v8.11.2) (default)stable -&gt; 8.11 (-&gt; v8.11.2) (default)iojs -&gt; N/A (default)lts/* -&gt; lts/carbon (-&gt; v8.11.2)lts/argon -&gt; v4.9.1 (-&gt; N/A)lts/boron -&gt; v6.14.2 (-&gt; N/A)lts/carbon -&gt; v8.11.2$ node -vv8.11.2]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker로 빠르게 mariadb, redis 서버 구동시키기]]></title>
    <url>%2F2018%2F05%2F07%2Fdocker%2Fdocker-redis-mariadb-start%2F</url>
    <content type="text"><![CDATA[중 괄호를 포함한 부분은 각자에 맡게 변경하시면 됩니다.호스트 OS 에서 127.0.0.1로 접속하면 됩니다.Mariadb5 버전대 사용(utf-8)123456$ sudo docker run --name mariadb5 -p 127.0.0.1:3306:3306 \-v &#123;호스트에 위치할 데이타 디렉토리&#125;:/var/lib/mysql \-e MYSQL_ROOT_PASSWORD=&#123;root비밀번호&#125; \-d mariadb:5.5 \--character-set-server=utf8 \--collation-server=utf8_general_ciredis3.2 버전대 사용1$ sudo docker run --name redis -p 127.0.0.1:6379:6379 -d redis:3.2]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[자바스크립트에서 false 반환 하는 경우]]></title>
    <url>%2F2018%2F04%2F10%2Fjavascript%2Fwhen-return-false%2F</url>
    <content type="text"><![CDATA[특정 변수의 값의 true, false 여부를 반환할시 아래와 같은 조건은 묵시적으로 false를 반환한다.아래와 같은 코드 사용 시12345if ( test ) &#123; console.log("true");&#125; else &#123; console.log("false");&#125;null 일 때undefined 일 때NaN 일 때공백 일 때숫자 0 (‘0’ 은 true)false]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nodejs-pm2 사용해보기]]></title>
    <url>%2F2018%2F04%2F10%2Fnodejs%2Fnodejs-pm2-usage%2F</url>
    <content type="text"><![CDATA[노드 앱을 구동하기 위해서 다양한 도구들을 사용하지만 저는 pm2를 사용합니다. 개발뿐만 아니라 실제 production에서도 사용하기 좋은 툴입니다. 매우 다양한 옵션도 지원하구요!pm2를 사용하여 쉽게 앱 관리&amp;watch&amp;클러스터 모드등을 사용할수 있습니다.설치pm2 global 로 설치1$ npm install pm2 -gpm2정상 설치 확인1$ pm2 -v사용법기본 express 템플릿 생성1234$ mkdir test$ cd test$ express --view=ejs$ npm installpm2 이용하여 앱 구동1$ pm2 start bin/www --name=pm2-testmonit 명령어1$ pm2 monit위 방법은 아주 간단히 pm2를 이용하여 프로젝트를 구동한 모습입니다. 그럼 ecosystem이란것을 이용하여 좀더 간단히 그리고 옵션도 주어서 구동시켜봅니다.ecosystem 템플릿 사용ecosystem.config.js 생성1$ pm2 ecosystem내용 삭제 후 아래 내용으로 교체1$ vi ecosystem.config.jsecosystem.config.js123456789101112131415module.exports = &#123;apps : &#123; name : 'pm2-test', script : 'bin/www', watch : true, ignore_watch : ["logs"], exec_mode : "cluster", instances : 0, merge_logs : true, log_date_format : "YY-MM-DD HH:mm:ss", error_file : "./logs/err.log", out_file : "./logs/out.log" &#125;&#125;;이 포스트에 모든 옵션을 넣기엔 약간 무리가 있어보입니다. 위에 적힌 옵션들만 보자면name : pm2 에서 관리하는 이름입니다.script : 앱을 구동할 경로 입니다. 보통 app.js 나 express 로 만드셨다면 bin/www 가 되겠지요watch : 파일이 변경되면 자동으로 재시작 하겠다는 의미입니다. 개발시에 유용합니다.ignore_watch : 배열안에 있는 리스트는 watch 대상에서 무시하겠다는 의미입니다. 로그파일이나 데이터 폴더등의 경로 혹은 이름이 될것입니다.exec_mode : 클러스터 모드로 구동합니다instances : 클러스터로 구동될시 몇개까지 구동할것인지 선택합니다.(0 : cpu갯수)merge_logs : 클러스터로 구동할시 로그를 한파일에 기록합니다.log_date_format : 로그에 출력될 날짜와 시간값의 형식입니다.error_file : 에러 파일 위치out_file : 기본 출력 로그 위치공식 메뉴얼 : http://pm2.keymetrics.io/docs/usage/application-declaration/ecosystem 사용기존 pm2-test 삭제1$ pm2 delete pm2-testecosystem.config.js로 시작1$ pm2 start ecosystem.config.js구동 확인1$ pm2 list네트워크 환경에서의 watch 사용vagrant같은 가상환경을 사용할시 pm2 에서 watch 옵션을 주고 파일 내용을 변경해도 자동시작이 되지 않을수 있습니다.(네트워크 마운트일 때) 그럴 경우 아래와 같은 옵션을 추가 시켜주세요.watch_options : {&quot;usePolling&quot;: true, &quot;interval&quot;:2000, &quot;binaryInterval&quot;:2000}제사한 내용은 아래 문서 참고https://github.com/paulmillr/chokidar#api]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[모든 이미지 컨테이너 일괄 삭제]]></title>
    <url>%2F2018%2F04%2F10%2Fdocker%2Fcontainer-image-remove%2F</url>
    <content type="text"><![CDATA[모든 컨테이너 삭제1docker rm $(docker ps -a -q)모든 이미지 삭제1docker rmi $(docker images -q)]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>chmod</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[NVM 글로벌 모듈 마이그레이션]]></title>
    <url>%2F2018%2F04%2F08%2Fnodejs%2Fnvm-global-module-migration%2F</url>
    <content type="text"><![CDATA[nvm으로 node의 버전을 관리할 때 LTS 버전을 올리거나 다른 버전으로 업데이트나 변경해야 될 떄가 있습니다.이때 기존의 global로 설치했던 모듈들은 버전을 변경한다고 자동으로 migration 되지 않습니다.nvm에선 node를 설치시 기존에 사용하던 global 모듈을 migration 해주는 명령어가 존재합니다.설치 시 모듈 migration1$ nvm install &#123;다운받을 버전&#125; --reinstall-packages-from=&#123;기존에 사용하던 버전&#125;덤으로 기본 default(LTS) 버전을 변경하는 명령어12$ nvm alias default &#123;변경버전&#125;$ nvm list]]></content>
      <categories>
        <category>Nodejs</category>
      </categories>
      <tags>
        <tag>nodejs</tag>
        <tag>nvm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ubuntu 16.04 Mariadb10 설치 하기 (ssh tunneling 접속)]]></title>
    <url>%2F2018%2F04%2F08%2Flinux%2Fubuntu16.04-maraidb10-install%2F</url>
    <content type="text"><![CDATA[기본 Repository에서 Mariadb10 설치12$ sudo apt-get update$ sudo apt-get install mariadb-server mariadb-client기본 설정1$ sudo mysql_secure_installationssh tunneling 접속 전ssh tunneling을 통해 원격에서 mysql에 root 유저에 접속하기 위해 설정합니다. (원래 이런게 없었던걸로 기억하는데 이 부분 때문에 한참 삽질하였습니다. mariadb10 만 그런건지… 해당 설정을 하지 않으면 ssh tunneling을 통해 원격에서 mysql 에 접속할수가 없습니다.)1234# mysql -u root -p&gt; use mysql;&gt; update user set plugin='mysql_native_password' where user='root';&gt; flush privileges;]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ubuntu</tag>
        <tag>database</tag>
      </tags>
  </entry>
</search>
